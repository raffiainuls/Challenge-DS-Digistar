# -*- coding: utf-8 -*-
"""Challenge DS Digistar Class Telkom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aIFDKkbQvy-VTszhN1JSmnz_3vf2xkBT

## Preprosessing
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, OneHotEncoder,MinMaxScaler
from sklearn.cluster import KMeans


# Commented out IPython magic to ensure Python compatibility.
#change direktori
# %cd /content/drive/My Drive/Challenge DS Digistar



#load data
students_scores = pd.read_csv('Data/StudentsScores.csv')
students_scores

# show total row dan columns
students_scores.shape

# drop last index
students_scores.drop('Unnamed: 0', axis = 1, inplace = True)

# show column with null value
def null_percentage(data):
  total = data.isnull().sum().sort_values(ascending = False)
  total = total[total != 0]
  percent = round(100 * total/len(data),2)
  return pd.concat([total,percent], axis = 1, keys = ['Total Null', 'Percent'])

null_percentage(students_scores)

#fill null value
students_scores = students_scores.fillna(0)

students_scores.info()

# add column total score
students_scores['total score'] = students_scores['math score'] + students_scores['reading score'] + students_scores['writing score']
students_scores

students_scores.describe()

"""### unique values columns"""

students_scores['race/ethnicity'].unique()

students_scores['parental level of education'].unique()

students_scores['lunch'].unique()

students_scores['test preparation course'].unique()

#make new columns for look condition score math, writing, reading and total : above mean or bellow mean
mean_math_score = round(students_scores['math score'].mean())
mean_reading_score = round(students_scores['reading score'].mean())
mean_writing_score = round(students_scores['writing score'].mean())
mean_total_score = round(students_scores['total score'].mean())

students_scores['type_math_score'] = students_scores.apply(lambda row : 'Above Mean' if row ['math score'] >= mean_math_score else 'Bellow Mean', axis = 1)
students_scores['type_writing_score'] = students_scores.apply(lambda row : 'Above Mean' if row ['writing score'] >= mean_reading_score else 'Bellow Mean', axis = 1)
students_scores['type_reading_score'] = students_scores.apply(lambda row : 'Above Mean' if row  ['reading score'] >= mean_writing_score else 'Bellow Mean', axis = 1)
students_scores['type_total_score'] = students_scores.apply(lambda row : 'Above Mean' if row ['total score'] >= mean_total_score else 'Bellow Mean', axis = 1)
students_scores

"""## Exploratory Data Analysis"""

students_scores.hist(bins= 50 , figsize = (7,7))

'''
plt.figure(figsize=(12, 8))
sns.heatmap(students_scores.assign(gender = students_scores.gender.astype('category').cat.codes,
                           race_ethnicity = students_scores['race/ethnicity'].astype('category').cat.codes,
                           parental_level_of_education	 = students_scores['parental level of education'].astype('category').cat.codes,
                           lunch  = students_scores.lunch .astype('category').cat.codes,
                           test_preparation_course = students_scores['test preparation course'].astype('category').cat.codes).corr(),
            annot = True, cmap ='RdYlGn', vmin = -1, vmax = 1, linewidths = 0.5)
'''

def boxplot(data, column):
  plt.figure(figsize = (10,7))
  sns.boxplot(x = data[column])
  plt.title(f'Boxplot {column}')
  

# boxplot look outlier in numerical columns
boxplot(students_scores, 'math score')
boxplot(students_scores, 'reading score')
boxplot(students_scores, 'writing score')
boxplot(students_scores, 'total score')

"""### Analysist Gender"""

count_gender = students_scores.groupby(['gender']).size().reset_index(name = 'count')
colors_gender = ['#b5191a', '#b5191a']

plot_count_gender = px.bar(count_gender, x = 'count', y = 'gender', color_discrete_sequence=colors_gender)
plot_count_gender

"""### Analysist race/ethinicity"""

def race_ethnicity_score_type(score, data=students_scores):
  color_map = {'Above Mean' : '#b5191a',
               'Bellow Mean' : '#1972ce'}
  race_ethnicity = data.groupby(['race/ethnicity', score]).size().reset_index(name = 'Total')
  fig = px.bar(race_ethnicity, x = 'race/ethnicity', y = 'Total', color = score, barmode = 'group', color_discrete_map=color_map)
  
  return fig



"""### Analysist parental level education"""

colors_parental_education = ['#b5191a','#b5191a', '#b5191a','#b5191a', '#b5191a']

parental_education_level = students_scores.groupby(['parental level of education']).size().reset_index(name = 'Total')
parental_education_level.sort_values('Total', ascending = False, inplace = True)
bar_plot_parental_education = px.bar(parental_education_level, x = 'parental level of education', y = 'Total', color_discrete_sequence=colors_parental_education)



def parental_type_score(score, data = students_scores):
  colors_map = {'some college' : '#b5191a',
                "associate's degree" : '#1972ce',
                'high scholl' : '#ffffff',
                'some high scholl' : '#7a3db4',
                "bachelor's degree" : '#4240c5',
                "master's degree" : '#263ab5'}
  data = data.loc[data[score] == 'Above Mean']
  data = data.groupby(['parental level of education', score]).size().reset_index(name = 'Total')
  data.sort_values('Total', ascending = False, inplace = True)

  fig = px.pie(data,
               values = data['Total'],
               names = data['parental level of education'],
               color = data['parental level of education'],
               color_discrete_map=colors_map)
  return fig



"""### Analysist type lunch"""

def lunch_type_score(score, data = students_scores):
  color_map = {'Above Mean' : '#b5191a',
               'Bellow Mean' : '#1972ce'}
  data = data.groupby(['lunch', score]).size().reset_index(name = 'Total')
  fig = px.bar(data, x = 'lunch', y = 'Total', color = score, barmode = 'group', color_discrete_map=color_map)
  
  return fig



"""### Analysist preparation course"""

def preparation_course_type_score(score, data = students_scores):
  color_map = {'none' : '#b5191a',
               'completed' : '#1972ce'}
  data = data.loc[data[score] == 'Above Mean']
  data = data.groupby(['test preparation course', score]).size().reset_index(name = 'Total')
  data.sort_values('Total', ascending = False, inplace = True)

  fig = px.pie(data,
               values = data['Total'],
               names = data['test preparation course'],
               color = data['test preparation course'],
               color_discrete_map=color_map)
  
  return fig


def distribution_score_prepare_test(score, data = students_scores):
  colors = ['#b5191a', '#1972ce']
  fig = px.box(data, x = 'test preparation course', y = score, points = 'all', color_discrete_sequence=colors)
  
  return fig

''' 
"""## Machine Learning"""

data = students_scores.dropna()

drop_column = ['type_math_score', 'type_writing_score', 'type_reading_score', 'type_total_score']

for column in drop_column:
  data = data.drop([column], axis = 1)

column_label_encoder = ['gender', 'race/ethnicity', 'lunch', 'test preparation course', 'parental level of education']

for col in column_label_encoder:
  le = LabelEncoder()
  data[col] = le.fit_transform(data[col])

numerical_columns = ['math score', 'reading score', 'writing score', 'total score']

for col in numerical_columns:
  scaler = MinMaxScaler()
  data[col] = scaler.fit_transform(data[[col]])

data

from yellowbrick.cluster import KElbowVisualizer

model = KMeans(random_state=42)
visualizer = KElbowVisualizer(model, k=(2,10))
visualizer.fit(data)
#visualizer.show()

optimal_clusters = visualizer.elbow_value_
print("Optimal number of clusters:", optimal_clusters)

kmeans = KMeans(n_clusters = optimal_clusters, random_state = 42)
kmeans.fit(data)
cluster_labels = kmeans.labels_

# Add cluster labels to the DataFrame
data['Cluster'] = cluster_labels
data

#!pip install pycaret

from pycaret.classification import *

# Membuat instance dari setup PyCaret
exp = setup(data, target='Cluster',  train_size=0.8, transformation=True, pca=True, pca_components=0.95, fix_imbalance=True, normalize = True, fix_imbalance_method='smote')

# Membandingkan beberapa model dan memilih yang terbaik
best_model = compare_models( fold=5)

# Melatih model terbaik menggunakan validasi silang dan tuning parameter
tuned_model = tune_model(best_model, optimize='F1', n_iter=100, search_library='scikit-learn')

# Melakukan prediksi menggunakan model tuned
predictions = predict_model(tuned_model, data)

# Menampilkan hasil prediksi

'''
